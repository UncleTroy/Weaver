<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr = 0;
tWalk = 0;
dir = 1;
spd = 2;
jump = 0;
tJump = 0;
xOffset = 0;
yOffset = 0;
lingeringVelocity = 0;
jumpTimer = 0;
jumpTimeMax = 4;
throwHold = 0;
hanging = 0;
hangTime = 0;
swinging = 0;
swingDir = 1;
storeThrow = 0;
swingJumpMomentumX = 0;
swingJumpMomentumY = 0;
testing = 0;
magicSelect = 0;
castingMagic = 0;
magicTile = 0;
selectedMagic = 0;
magicTimer = 0;
sprOverride = 0;
castSpeed = 4;
teleportTime = 0;

playerStandSprite = spr_player_stand;
playerWalkSprite = spr_player_walk;
playerJumpSprite = spr_player_jump;

jump1 = 2; // jump squat
jump2 = 2+jump1; // initial velocity
jump3 = 13+jump2; // full push-off and most of jump
jump4 = 6+jump3; // beginning to slow
jump5 = 4+jump4; // slowing way down
jump6 = 2+jump5; // hover
jump7 = 4+jump6; // falling slowly
jump8 = 6+jump7; // falling faster
jumpReset = 0;

spear = 1; // 0 is none, 1 is normal, 2 is... ect
spearSprite = spr_firstSpear_1;
spearChosen = obj_firstSpear;
throwing = 0;
tThrow = 0;
tSpr = 0;

S = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all the things
S = keyboard_check(ord('S')) &amp;&amp; !magicSelect &amp;&amp; !castingMagic;

if(!global.stop){
    
    xOffset = 0;
    yOffset = 0;
    
    if(!hanging &amp;&amp; !castingMagic &amp;&amp; keyboard_check(ord('K'))){
        if(!magicSelect){
            var c = 0;
            repeat(9){
                global.spellCast[c] = 0;
                c++;
            }
            magicTile = 4;
            
            //select the main tile if you are holding the button
            if(keyboard_check(ord('J'))){
                global.spellCast[magicTile] = 1;
            }
            
            magicTimer = 0;
            totalMagicTiles = 0;
            throwing = 0;
            tThrow = 0;
            throwHold = 0;
            tSpr = 0;
            storeThrow = 0;
            spr = 0;
            sprOverride = 0;
            if(instance_exists(obj_console)){
                obj_console.cursorAnimate = 0;
                obj_console.magicSquareAnimate = 0;
            }
            magicSelect = 1;
        }else if(keyboard_check_pressed(ord('A'))){
            magicTile--;
            if((magicTile+1) mod 3 == 0){
                magicTile += 3;
            }
            scr_toggleMagicTileHold();
        }else if(keyboard_check_pressed(ord('D'))){
            magicTile++;
            if(magicTile mod 3 == 0){
                magicTile -= 3;
            }
            scr_toggleMagicTileHold();
        }else if(keyboard_check_pressed(ord('W'))){
            magicTile-=3;
            if(magicTile &lt; 0){
                magicTile += 9;
            }
            scr_toggleMagicTileHold();
        }else if(keyboard_check_pressed(ord('S'))){
            magicTile+=3;
            if(magicTile &gt; 8){
                magicTile -= 9;
            }
            scr_toggleMagicTileHold();
        }else{
            scr_toggleMagicTilePress();
        }
        
        //animation
        
        magicTimer++;
        if(magicTimer mod 2 == 0){
            spr++;
            if(spr &gt; 8){
                spr = 4;
            }
            sprOverride = spr;
        }
        if(magicTimer mod 4 == 0){
            instance_create(x+dir*2,y+4,obj_magicEffect);
        }
        
        
    }else{
        if(magicSelect){
            magicSelect = 0;
            castingMagic = 1;
            magicTimer = 0;
            spr = 0;
            teleportTime = 0;
            sprOverride = spr;
            //determine magic
            
            if(scr_isMagicRecipe(0,0,0,
                                0,1,1,
                                0,1,1)){
                //set cast speed and selected magic
                selectedMagic = 0;
                castSpeed = 4;
            }else if(scr_isMagicRecipe(1,1,1,
                                0,0,0,
                                0,0,0)){
                //set cast speed and selected magic
                selectedMagic = 1;
                castSpeed = 10;
            }else if(scr_isMagicRecipe(1,0,1,
                                0,1,0,
                                1,0,1)){
                //set cast speed and selected magic
                selectedMagic = 2;
                castSpeed = 3;
            }else if(scr_isMagicRecipe(1,1,1,
                                1,1,1,
                                1,1,1)){
                //set cast speed and selected magic
                selectedMagic = 9;
                castSpeed = 10;
            }else{
                selectedMagic = -1;
                castSpeed = 3;
            }
        }
    }
    
    if(castingMagic){
        
    
        //animation
        
        magicTimer++;
        if(magicTimer mod castSpeed == 0){
            spr++;
            
            var teleportStartup = 12
            
            if(selectedMagic == 2 &amp;&amp; spr &gt; 6 &amp;&amp; teleportTime &lt; teleportStartup){
                spr = 6;
            }
            if(spr == 6){
                //cast it
                if(selectedMagic == 0){
                    d = instance_create(x+dir*8,y,obj_fireball);
                    d.dir = dir;
                }else if(selectedMagic == 2){
                    teleportTime++;
                    
                    if(teleportTime mod 3 == 0 || teleportTime mod 4 == 0){
                        image_alpha = 0;
                    }else{
                        image_alpha = 1;
                    }
                    if(teleportTime == teleportStartup-4){
                        instance_create(x,y+8,obj_deathEffect);
                    }else if(teleportTime == teleportStartup){
                        var ver = 0;
                        var hor = 0;
                        
                        if(keyboard_check(ord('W'))){
                            ver--;
                        }
                        if(keyboard_check(ord('S'))){
                            ver++;
                        }
                        if(keyboard_check(ord('D'))){
                            hor++;
                        }
                        if(keyboard_check(ord('A'))){
                            hor--;
                        }
                        
                        var distance = 16*4;
                        hor*=distance;
                        ver*=distance;
                        
                        var c = 0;
                        while(true){
                            c++;
                            if(!place_meeting(x+hor,y+ver,obj_wall)){
                                if(!instance_exists(obj_coolCamera)
                                || (instance_exists(obj_coolCamera)
                                &amp;&amp; x+hor &gt;= obj_coolCamera.cViewX1
                                &amp;&amp; x+hor &lt;= obj_coolCamera.cViewX2
                                &amp;&amp; y+ver &gt;= obj_coolCamera.cViewY1
                                &amp;&amp; y+ver &lt;= obj_coolCamera.cViewY2)){
                                    x+=hor;
                                    y+=ver;
                                    break;
                                }
                            }
                            if(c &gt; 1000){
                                break;
                            }
                            if(ver &gt; 0){
                                ver--;
                            }else if(ver &lt; 0){
                                ver++;
                            }
                            if(hor &gt; 0){
                                hor--;
                            }else if(hor &lt; 0){
                                hor++;
                            }
                        }
                        //create cool things to indicate teleportation here
                        instance_create(x,y+8,obj_deathEffect);
                        image_alpha = 1;
                    }
                }else if(selectedMagic == 9){
                    //I purposely crash the game here
                    IfYouAreReadingThisShoutoutsToYou++;
                }
            }
            if(spr &gt; 8){
                //end
                castingMagic = 0;
            }
            sprOverride = spr;
        }
        if(magicTimer mod 4 == 0){
            instance_create(x+dir*2,y+4,obj_magicEffect);
        }
    }
    
    if(!magicSelect &amp;&amp; !castingMagic){
        
        //can you grab the ceiling?
        if(keyboard_check_pressed(ord('J')) &amp;&amp; keyboard_check(ord('W')) &amp;&amp; place_meeting(x,y-2,obj_wall)){
            hanging = 1;
            jump = 0;
            tJump = 0;
            jumpTimer = 0;
            storeThrow = 0;
        }
    }
        
        
    if(!hanging){
        
        //jump
        if(jumpTimer &gt; 0){
            jumpTimer++;
            if(jumpTimer &gt; jumpTimeMax){
                jumpTimer = 0;
            }
        }
        if(!magicSelect &amp;&amp; !castingMagic &amp;&amp; (!jump || jumpTimer &gt; 0) &amp;&amp; keyboard_check_pressed(vk_space)){
            jump = 1;
            tJump = 0;
            jumpTimer = 0;
        }else if(jump == 1 &amp;&amp; tJump &lt; jump4 &amp;&amp; (magicSelect || castingMagic || keyboard_check_released(vk_space))){
            jumpReset = 1;
        }
        
        //can we go on top of platforms?
        if(jump == 0){
            scr_goOnTopOfPlatforms();
        }
        
        //x movement
        if(!magicSelect &amp;&amp; !castingMagic &amp;&amp; keyboard_check(ord('A'))){
            if(swingJumpMomentumX &gt; 0){
                swingJumpMomentumX = 0;
            }
            scr_playerWalkSprite();
            scr_playerMove(-1);
            
        }else if(!magicSelect &amp;&amp; !castingMagic &amp;&amp; keyboard_check(ord('D'))){
            if(swingJumpMomentumX &lt; 0){
                swingJumpMomentumX = 0;
            }
            scr_playerWalkSprite();
            scr_playerMove(1);
            
        }else if(jump == 0){
            var m = place_meeting(x,y+1,obj_wall);
            mask_index = spr_player_lowerHitbox;
            m += place_meeting(x,y+1,obj_platform) &amp;&amp; !S;
            mask_index = sprite_index;
            
            if(m &gt; 0){
                spr = 0;
                sprite_index = playerStandSprite;
                swingJumpMomentumX = 0;
                swingJumpMomentumY = 0;
                if(!place_meeting(round(x),round(y),obj_wall)){
                    x = round(x);
                    y = round(y);
                }
            }
            tWalk = 0;
        }else{ // in the air holding no direction
            //repeat(abs(lingeringVelocity)+1){
                /*if(!place_meeting(x+lingeringVelocity,y,obj_wall) &amp;&amp; (jump != 1 || tJump &gt; jump1)){ // not hitting wall and not jump squatting
                    x+=lingeringVelocity;
                    xOffset+=lingeringVelocity;
                }else if(place_meeting(x+lingeringVelocity,y,obj_wall)){
                    var c = 0;
                    do{
                        x+=0.5*dir;//assuming that dir is always the same sign as lingeringVelocity
                        c++;
                    }until(place_meeting(x+dir,y,obj_wall) || c &gt; 1000);
                    lingeringVelocity = 0;
                }
                if(abs(lingeringVelocity) &gt; 0){
                    lingeringVelocity-=0.5*dir;
                }
            //}*/
        }
        
        //y movement
        
        if(jump == 1){
            sprite_index = playerJumpSprite;
            tJump++;
            
            if(jumpReset &amp;&amp; tJump &gt; jump2){ // if you let go of jump there is a minimum height
                jumpReset = 0;
                tJump = jump4;
            }
            
            if(tJump &lt;= jump1){ // jump squat
                spr = 0;
            }else if(tJump &lt;= jump2){ // initial velocity
                spr = 1;
                scr_jump(2);
            }else if(tJump &lt;= jump3){ // full push-off and most of jump
                spr = 2;
                scr_jump(4);
            }else if(tJump &lt;= jump4){ // beginning to slow
                spr = 2;
                scr_jump(2);
            }else if(tJump &lt;= jump5){ // slowing way down
                spr = 3;
                scr_jump(1);
            }else if(tJump &lt;= jump6){ // hover
                spr = 3;
            }else if(tJump &lt;= jump7){ // falling slowly
                spr = 3;
                scr_jump(-1);
            }else if(tJump &lt;= jump8){ // falling faster
                spr = 4;
                scr_jump(-2);
            }else{ // falling fast
                spr = 4;
                scr_jump(-4);
            }
        }else if(jump == -1){ // hit the ground
            sprite_index = playerJumpSprite;
            tJump++;
            if(tJump &lt;= 2){
                spr = 0;
            }else{
                jump = 0;
                tJump = 0;
                //sprite_index = playerJumpSprite;
                swingJumpMomentumX = 0;
                swingJumpMomentumY = 0;
            }
        }else{
            var m = place_meeting(x,y+1,obj_wall);
            mask_index = spr_player_lowerHitbox;
            m += place_meeting(x,y+1,obj_platform) &amp;&amp; !S;
            mask_index = sprite_index;

            if(m == 0){
                if(jump == 0 &amp;&amp; swingJumpMomentumY == 0){
                    jump = 1;
                    tJump = jump6;
                    jumpTimer = 1;
                }
            }
        }
        
        if(throwing == 0 &amp;&amp; !magicSelect &amp;&amp; !castingMagic){
            if(storeThrow == 1 || keyboard_check_pressed(ord('J'))){
                throwing = 1;
                tThrow = 0;
                tSpr = 0;
                storeThrow = 0;
            }
        }
        if(throwing == 1){
            tThrow++;
            
            if(tSpr &gt; 0 &amp;&amp; keyboard_check_pressed(ord('J'))){
                storeThrow = 1;
            }
            
            if(tThrow &gt; 4){
                if(tSpr == 0 &amp;&amp; keyboard_check(ord('J'))){
                    throwHold++;
                    if(throwHold &gt; 20){
                        throwHold = 20;
                    }
                }else{
                    tThrow = 0;
                    tSpr++;
                    if(tSpr == 1){
                        s = instance_create(x+9*dir,y+5,spearChosen);
                        s.dir = dir;
                        
                        if(keyboard_check(ord('W'))){
                            s.ySpeed += -3;
                            s.y-=2;
                        }
                        if(keyboard_check(ord('S'))){
                            s.xSpeed -= 1;
                            if(s.xSpeed &lt; 0){
                                s.xSpeed = 0;
                            }
                            s.ySpeed += 2;
                        }
                        
                        if(throwHold &gt; 0){
                            s.xSpeed *= throwHold/20+1;
                            s.ySpeed *= throwHold/20+1;
                            s.damage *= throwHold/20+1;
                            throwHold = 0;
                        }
                        
                        
                        with(s){
                            scr_calculateAngle();
                            image_angle = rot*dir;
                        }
                    }
                }
            }
            if(sprite_index == spr_player_stand){
                if(keyboard_check(ord('W'))){
                    sprite_index = spr_player_throw_stand_up;
                }else{
                    sprite_index = spr_player_throw_stand;
                }
                if(tSpr == 2){
                    throwing = 0;
                    sprite_index = spr_player_stand;
                }
            }else if(sprite_index == spr_player_walk){
                if(keyboard_check(ord('W'))){
                    sprite_index = spr_player_throw_walk_up;
                }else{
                    sprite_index = spr_player_throw_walk;
                }
                if(tSpr == 2){
                    throwing = 0;
                    sprite_index = spr_player_walk;
                }
            }else if(sprite_index == spr_player_jump){
                sprite_index = spr_player_throw_jump;
                if(tSpr == 2){
                    throwing = 0;
                    sprite_index = spr_player_jump;
                }
            }
        }
        
        //swing momentum
        if(swingJumpMomentumX != 0){
            scr_playerMove(swingJumpMomentumX);
            sprite_index = spr_player_hang;
            spr = 22;
        }
        if(swingJumpMomentumY != 0){
            scr_jump(swingJumpMomentumY);
            jump = 0;
            tJump = 0;
            jumpTimer = 0;
            if(swingJumpMomentumY &gt; 0){
                swingJumpMomentumY -= .2;
            }
        }
        
    }else{
        // if hanging
        hangTime++;
        sprite_index = spr_player_hang;
        if(swinging == 0){
            spr = 8;
        }else if(hangTime == 1){
            spr = 10;
        }else if(hangTime == 4){
            spr = 12;
        }else if(hangTime == 6){
            spr = 14;
        }else if(hangTime == 8){
            spr = 16;
        }else if(hangTime == 9){
            spr = 18;
        }else if(hangTime == 10){
            spr = 20;
        }else if(hangTime == 11){
            spr = 22;
        }
        
        if((swinging == 0 &amp;&amp; hangTime &gt; 20) || !keyboard_check(ord('J'))){
            hanging = 0;
            hangTime = 0;
            swinging = 0;
            swingJumpMovementX = 0;
            swingJumpMovementY = 0;
        }
        
        if(swinging == 0){
            if(keyboard_check(ord('A'))){
                swingDir = -1;
                dir = -1;
                swinging = 1;
                hangTime = 0;
            }else if(keyboard_check(ord('D'))){
                swingDir = 1;
                dir = 1;
                swinging = 1;
                hangTime = 0;
            }
        }else{
            if(hangTime &gt; 10){
                swingJumpMomentumX = swingDir * 1;
                swingJumpMomentumY = 2;//jumping is inverted
                hanging = 0;
                hangTime = 0;
                swinging = 0;
            }
        }
    }
}else{
    //can you grab the ceiling THROUGH A LOADING ZONE?!??!??!?!????
    if(keyboard_check_pressed(ord('J')) &amp;&amp; keyboard_check(ord('W')) &amp;&amp; place_meeting(x,y-2,obj_wall)){
        hanging = 1;
        jump = 0;
        tJump = 0;
        jumpTimer = 0;
    }
    if(jump == 1 &amp;&amp; tJump &lt; jump4 &amp;&amp; keyboard_check_released(vk_space)){
        jumpReset = 1;
    }
}

if(magicSelect){
    sprite_index = spr_player_begin_casting;
    spr = sprOverride;
}else if(castingMagic){
    sprite_index = spr_player_cast_magic;
    spr = sprOverride;
}

image_xscale = dir;
if(!throwing){
    image_index = spr;
}else{
    image_index = tSpr;
}

if(keyboard_check_pressed(ord('I'))){
    if(spearChosen == obj_firstSpear){
        spearChosen = obj_sturdySpear;
        spearSprite = spr_sturdySpear;
    }else if(spearChosen == obj_sturdySpear){
        spearChosen = obj_firstSpear;
        spearSprite = spr_firstSpear_1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(throwHold &gt; 0){
    draw_set_color(c_black);
    draw_rectangle(x-5,y-10,x+5,y-7,false);
    if(throwHold &lt; 20){
        draw_set_color(c_green);
    }else{
        draw_set_color(c_white);
    }
    draw_rectangle(x-4,y-9,x-4+(throwHold/20*8),y-8,false);
}
draw_self();
//draw_text(x,y-30,"m: "+string(testing));
//draw_text(x,y,"no momentum?: "+string(swingJumpMomentumY == 0));
//draw_text(x,y+30,"jump: "+string(jump));

if(sprite_index == spr_player_hang){
    if(hanging == 1){
        draw_sprite_ext(spearSprite,0,x,y-3,dir,1,0,c_white,1);
    }
    draw_sprite_ext(sprite_index,image_index+1,x,y,dir,1,0,c_white,image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
