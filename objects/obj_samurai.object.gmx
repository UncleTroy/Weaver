<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_samurai_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_enemyHitCreate();
scr_enemyAttackCreate();
control = 0; // 0
spr = 0;
tWalk = 0;
dir = -1;//sammerguy is facing left
spd = 2;
jump = 0;
tJump = 0;
standing = 1;
idle = 0;
turnSequence = 0;
turn = 0;
A = 0;
S = 0;
D = 0;
W = 0;
SPACE = 0;
J = 0;
xOffset = 0;
yOffset = 0;

jump1 = 2; // jump squat
jump2 = 2+jump1; // initial velocity
jump3 = 12+jump2; // full push-off and most of jump
jump4 = 6+jump3; // beginning to slow
jump5 = 4+jump4; // slowing way down
jump6 = 2+jump5; // hover
jump7 = 4+jump6; // falling slowly
jump8 = 6+jump7; // falling faster
jumpReset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GIVE ME CONTROL
if(control == 1){
    if(keyboard_check(ord('A'))){
        A = 1;
    }
    if(keyboard_check(ord('S'))){
        S = 1;
    }
    if(keyboard_check(ord('D'))){
        D = 1;
    }
    if(keyboard_check(ord('W'))){
        W = 1;
    }
    if(keyboard_check(vk_space)){
        SPACE = 1;
    }
    if(keyboard_check(ord('J'))){
        J = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.stop){
    
    scr_enemyHitStep();
    scr_samurai_swingAttack();
    
    if(stunFrames == 0 &amp;&amp; attacking == 0){
        
        xOffset = 0;
        yOffset = 0;
        //jump
        if(!jump &amp;&amp; SPACE){
            standing = 0;
            jump = 1;
            tJump = 0;
        }else if(jump == 1 &amp;&amp; tJump &lt; jump4 &amp;&amp; SPACE == 0){
            jumpReset = 1;
        }
        
        //x movement
        if(A){
            if(jump == 0 &amp;&amp; !turnSequence &amp;&amp; (standing == 1 || dir == 1)){
                turnSequence = 1;
                turn = 0;
                spr = 0;
            }
            
            dir = -1;
            if(turnSequence == 1){
                //scr_guardTurnSprite();
            }
            if(turnSequence == 0){ // yeah this can't be an else
                //scr_guardWalkSprite();
                repeat(spd){
                    if(!place_meeting(x-1,y,obj_wall) &amp;&amp; (jump != 1 || tJump &gt; jump1)){ // not hitting wall and not jump squatting
                        x-=1;
                    }
                }
            }
        }else if(D){
            if(jump == 0 &amp;&amp; !turnSequence &amp;&amp; (standing == 1 || dir == -1)){
                turnSequence = 1;
                turn = 0;
                spr = 0;
            }
            
            dir = 1;
            if(turnSequence == 1){
                //scr_guardTurnSprite();
            }
            if(turnSequence == 0){ // yeah this can't be an else
                //scr_guardWalkSprite();
                repeat(spd){
                    if(!place_meeting(x+1,y,obj_wall) &amp;&amp; (jump != 1 || tJump &gt; jump1)){
                        x+=1;
                    }
                }
            }
        }else if(jump == 0){
            if(place_meeting(x,y+1,obj_wall)){
                if(!standing || turnSequence){
                    spr = 0;
                    idle = -1;
                    turnSequence = 0;
                }
                standing = 1;
            }
            tWalk = 0;
        }
        
        if(standing == 1 &amp;&amp; !turnSequence){
            if(sprite_index != spr_samurai_idle){// if you were walking and came to a stop
            
                if(idle == -1){
                    spr = 1;
                    turn = 0;
                    idle = 0;
                }
                
                if(dir == -1){
                    //sprite_index = spr_guard_turn_left;
                }else{
                    //sprite_index = spr_guard_turn_right;
                }
                
                turn++;
                if(turn &gt;= 8){
                    spr--;
                    if(spr &lt; 0){
                        sprite_index = spr_samurai_idle;
                    }
                    turn = 0;
                }
                
            }else{ // ribbon wave
                if(idle == -1){
                    idle = 1;
                }
                idle+=1;
                if(idle &gt; 8){
                    spr++;
                    if(spr &gt;= 4){
                        spr = 0;
                    }
                    idle = 0;
                }
            }
        }
        
        //y movement
        if(jump == 1){
            //sprite_index = spr_guard_jump;
            tJump++;
            
            if(jumpReset &amp;&amp; tJump &gt; jump2){ // if you let go of jump there is a minimum height
                jumpReset = 0;
                tJump = jump4;
            }
            
            if(tJump &lt;= jump1){ // jump squat
                spr = 0;
            }else if(tJump &lt;= jump2){ // initial velocity
                spr = 1;
                scr_jump(2);
            }else if(tJump &lt;= jump3){ // full push-off and most of jump
                spr = 2;
                scr_jump(4);
            }else if(tJump &lt;= jump4){ // beginning to slow
                spr = 2;
                scr_jump(2);
            }else if(tJump &lt;= jump5){ // slowing way down
                spr = 3;
                scr_jump(1);
            }else if(tJump &lt;= jump6){ // hover
                spr = 3;
            }else if(tJump &lt;= jump7){ // falling slowly
                spr = 3;
                scr_jump(-1);
            }else if(tJump &lt;= jump8){ // falling faster
                spr = 4;
                scr_jump(-2);
            }else{ // falling fast
                spr = 4;
                scr_jump(-4);
            }
        }else if(jump == -1){
            //sprite_index = spr_guard_jump;
            tJump++;
            if(tJump &lt;= 2){
                spr = 0;
            }else{
                spr = 1;
                jump = 0;
                tJump = 0;
                //sprite_index = spr_guard_walk;
            }
        }else{
            if(!place_meeting(x,y+1,obj_wall)){
                if(jump == 0){
                    jump = 1;
                    tJump = jump6;
                }
            }
        }
    }
}

A = 0;
S = 0;
D = 0;
W = 0;
SPACE = 0;
J = 0;

if(standing == 0 &amp;&amp; turnSequence == 0){
    image_xscale = dir;
}else{
    image_xscale = 1;
}
image_index = spr;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
