<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = 1; // 0 is stationary, 1 moves with an object.
    //0: x and y determine where the view actually is.
transition = 0;
transTime = 0;
xTrans = 0;
yTrans = 0;
object = obj_player; // the object it would move with in mode 1.
cSpeed = 0; //current camera speed.
mSpeed = 4; //maximum camera speed.
tSpeed = 0; //timer for lowering speed.
oTime = 0; //time the object has been outside of the range set since it was last inside.
rangeW = 0; //width of the "radius" of the range's box.
rangeH = 0; //height of the "radius" of the range's box.
snapAlignment = 1; //snap to object frame one, if mode == 1.
updateRoomVars = 1;
toX = 0;
toY = 0;
xBias = 0; // an offset to the view of the camera.
yBias = 0; // an offset to the view of the camera.
firstFrame = 1;
transX1 = 0;
transX2 = 0;
transY1 = 0;
transY2 = 0;
transitionSpeed = 0;
transChangeX = 0;
transChangeY = 0;

cViewX1 = 0;
cViewY1 = 0;
cViewX2 = 0;
cViewY2 = 0;

xResolution = 320;
yResolution = 192;

instance_deactivate_all(true);
instance_activate_object(obj_player);
instance_activate_object(obj_room);
instance_activate_object(obj_console);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!firstFrame &amp;&amp; (object.x &lt; cViewX1 || object.x &gt; cViewX2 || object.y &lt; cViewY1 || object.y &gt; cViewY2)){
    transition = 1;
    if(object.x &lt; cViewX1){
        xTrans = -1;
    }else if(object.x &gt; cViewX2){
        xTrans = 1;
    }else{
        xTrans = 0;
    }
    if(object.y &lt; cViewY1){
        yTrans = -1;
    }else if(object.y &gt; cViewY2){
        yTrans = 1;
    }else{
        yTrans = 0;
    }
    
    object.x+=xTrans;
    object.y+=yTrans;
    
    x = view_xview[view_current]+view_wview[view_current]/2;
    y = view_yview[view_current]+view_hview[view_current]/2;
    updateRoomVars = 1;
    global.stop = 1;
}

if(updateRoomVars == 1){
    currentRoom = scr_findRoom(object.x,object.y);

    if(currentRoom != noone){
        cViewX1 = currentRoom.x1+1;// trust me
        cViewY1 = currentRoom.y1+1;
        cViewX2 = currentRoom.x2;
        cViewY2 = currentRoom.y2;
        error = 0;
    }else{
        cViewX1 = object.x-150;
        cViewY1 = object.y-100;
        cViewX2 = object.x+150;
        cViewY2 = object.y+100;
        error = 1;
        transition = 0;
        global.stop = 0; // beware
    }
    
    instance_activate_region(cViewX1,cViewY1,cViewX2-cViewX1,cViewY2-cViewY1,true);
    
    updateRoomVars = 0;
}

if(transition == 1){
    transTime++;
    
    if(transTime &gt;= 30){
        transTime = 0;
        transition = 0;
        global.stop = 0;
        instance_deactivate_region(cViewX1,cViewY1,cViewX2-cViewX1,cViewY2-cViewY1,false,true);
        instance_activate_object(obj_room);
        instance_activate_object(obj_console);
    }
}else{

    if(snapAlignment){
        if(mode == 1 &amp;&amp; instance_exists(object)){ // snap to object (1 frame off of create).
            x = object.x + xBias;
            y = object.y + yBias;
        }
        snapAlignment = 0;
    }else if(mode == 1 &amp;&amp; instance_exists(object)){
        var oX = object.x;
        var oY = object.y;
        
        if(oX &lt; x - rangeW || oX &gt; x + rangeW || oY &lt; y - rangeH || oY &gt; y + rangeH){ // if target is out of range
            if(tSpeed != 0){
                tSpeed = 0;
            }
            
            oTime++;
            cSpeed = (oTime)/10;
            if(cSpeed &gt; mSpeed){
                cSpeed = mSpeed;
            }
            if(x-oX &lt; 0){
                var xdir = -1;
            }else{
                var xdir = 1;
            }
            if(y-oY &lt; 0){
                var ydir = -1;
            }else{
                var ydir = 1;
            }
            toX = (x-oX)/25*cSpeed+xdir*0.5;
            toY = (y-oY)/25*cSpeed+ydir*0.5;
            
            if(abs(x-oX) &gt;= abs(toX)){
                x-=toX;
            }
            if(abs(y-oY) &gt;= abs(toY)){
                y-=toY;
            }
            
        }else{ // slow down if target is in range.
            if(cSpeed &gt; 0){
                if(oTime &gt; 0){
                    cSpeed -= cSpeed mod 0.25; // initial decelleration.
                    if(cSpeed &lt; 0.25){
                        cSpeed = 0.25;
                    }
                    oTime = 0;
                }else{
                    tSpeed++;
                    if(tSpeed &gt; 2){
                        if(cSpeed &gt; 0.25){
                            cSpeed -= 0.25;
                            tSpeed = 0;
                        }
                    }
                }
                
                toX = (x-oX)/15*cSpeed;
                toY = (y-oY)/15*cSpeed;
                
                if(abs(x-oX) &lt; 1){
                    x = oX;
                }else{
                    if(abs(x-oX) &gt;= abs(toX)){
                        x-=toX;
                    }
                }
                if(abs(y-oY) &lt; 1){
                    y = oY;
                }else{
                    if(abs(y-oY) &gt;= abs(toY)){
                        y-=toY;
                    }
                }
                
            }else if(oTime &gt; 0){
                oTime = 0;
            }
        }
    }
}

if(transition == 1){
    if(transTime == 1){
        if(xTrans != 0){
            transitionSpeed = xResolution/30;
        }
        if(yTrans != 0){
            transitionSpeed = yResolution/30;
        }
        
        transX1 = (cViewX1 - (x+xBias-xResolution/2)) /30;
        transX2 = (cViewX2 - (x+xBias+xResolution/2)) /30;
        transY1 = (cViewY1 - (y+yBias-yResolution/2)) /30;
        transY2 = (cViewY2 - (y+yBias+yResolution/2)) /30;
        
        if(x+xBias-xResolution/2 &lt; cViewX1){
            transChangeX = transX1;
        }else if(x+xBias+xResolution/2 &gt; cViewX2){
            transChangeX = transX2;
        }else{
            if(object.x+xBias-xResolution/2 &lt; cViewX1){
                transChangeX = (cViewX1+xResolution/2+xBias-x)/30;
            }else if(object.x+xBias+xResolution/2 &gt; cViewX2){
                transChangeX = (cViewX2-xResolution/2+xBias-x)/30;
            }else{
                transChangeX = (object.x - (x+xBias)) /30;
            }
        }
        
        if(y+yBias-yResolution/2 &lt; cViewY1){
            transChangeY = transY1;
        }else if(y+yBias+yResolution/2 &gt; cViewY2){
            transChangeY = transY2;
        }else{
            if(object.y+yBias-yResolution/2 &lt; cViewY1){
                transChangeY = (cViewY1+yResolution/2+yBias-y)/30;
            }else if(object.y+yBias+yResolution/2 &gt; cViewY2){
                transChangeY = (cViewY2-yResolution/2+yBias-y)/30;
            }else{
                transChangeY = (object.y - (y+yBias)) /30;
            }
        }
    }
    x+=xTrans*transitionSpeed;
    y+=yTrans*transitionSpeed;
    if(xTrans == 0){
        if(abs(transChangeX) &gt; 0.05){
            x+=transChangeX;
        }
    }
    if(yTrans == 0){
        if(abs(transChangeY) &gt; 0.05){
            y+=transChangeY;
        }
    }
    /*if(xTrans == 0){
        if(transX1 &gt; 0.05){// &amp;&amp; x+xBias-xResolution/2 &lt; cViewX1){
            x+=transX1;
        }
        if(transX2 &lt; -0.05){// &amp;&amp; x+xBias+xResolution/2 &gt; cViewX2){
            x+=transX2;
        }
    }
    if(yTrans == 0){
        if(transY1 &gt; 0.05){// &amp;&amp; y+yBias-yResolution/2 &lt; cViewY1){
            y+=transY1;
        }
        if(transY2 &lt; -0.05){// &amp;&amp; y+yBias+yResolution/2 &gt; cViewY2){
            y+=transY2;
        }
        if(y+yBias-yResolution/2 &gt;= cViewY1 &amp;&amp; y+yBias+yResolution/2 &lt;= cViewY2){
            y-=(transY1+transY2)/2;
        }
    }*/

}else{
    x=round(x);
    y=round(y);
    
    do{
        x+=1;
    }until(x+xBias-xResolution/2 &gt;= cViewX1);
    
    do{
        x-=1;
    }until(x+xBias+xResolution/2 &lt;= cViewX2);
    
    do{
        y+=1;
    }until(y+yBias-yResolution/2 &gt;= cViewY1);
    
    do{
        y-=1;
    }until(y+yBias+yResolution/2 &lt;= cViewY2);
    
    /*repeat(50){
    
        if(x+xBias-xResolution/2 &lt; cViewX1){
            x++;
        }
        
        if(x+xBias+xResolution/2 &gt; cViewX2){
            x--;
        }
    
        if(y+yBias-yResolution/2 &lt; cViewY1){
            y++;
        }
        
        if(y+yBias+yResolution/2 &gt; cViewY2){
            y--;
        }
    }
    */
}

view_xview[view_current] = x+xBias-xResolution/2;
view_yview[view_current] = y+yBias-yResolution/2;
view_wview[view_current] = xResolution;
view_hview[view_current] = yResolution;

firstFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(oTime &gt; 0){
    draw_set_color(c_red);
}else if(test){
    draw_set_color(c_yellow);
}else{
    draw_set_color(c_green);
}
draw_rectangle(x-1,y-1,x+1,y+1,false);
draw_text(x,y-6,string(cSpeed));
*/
/*draw_set_font(font0);
draw_set_color(c_black);
//draw_text(x,y-20,string(x) + " | " + string(y));
//draw_text(x,y+20,string(cViewX1) + " | " + string(cViewY1));
if(error){
    draw_text(x,y,"ERROR");
}
draw_text(x,y-80,string(transX1));
draw_text(x,y-60,string(transY1));
draw_text(x,y-40,string(transX2));
draw_text(x,y-20,string(transY2));
*/
//draw_text(x,y+20,string((cViewX1 - (x+xBias-xResolution/2))/30));
//draw_text(x,y+40,string((cViewY1-testing)/30));
//draw_text(x,y+60,string(x));
//draw_text(x,y+80,string(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
