<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sturdySpear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_platform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xSpeed = 2//2.25;
ySpeed = -1//-1;
xMomentum = 4;
yMomentum = 4;
xFalloff = .01;
yFalloff = .1;
damage = 3;
dir = 1;
rot = 0;
done = 0;
normalSprite = sprite_index;
hitboxSprite = spr_sturdySpear_HB;
hitbox = instance_create(x,y,obj_spearHB);
hitbox.sprite_index = hitboxSprite;
hitbox.owner = id;
//image_alpha = 0;
doneTimer = 0;
stun = 1;
knockback = 1;
iFrames = 1;
mask_index = spr_noHB;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(xMomentum &gt; 0){
    xMomentum-=xFalloff;
}
yMomentum-=yFalloff;
if(xMomentum &lt;= 0){
    xSpeed-=1;
    xMomentum = xSpeed*10;
}
if(yMomentum &lt;= 0){
    if(ySpeed &gt; -8){
        ySpeed+=1;
    }
    yMomentum = ySpeed*10;
}*/
if(!global.stop){
    image_alpha = 1;
    mask_index = hitboxSprite;
    if(done == 1 &amp;&amp; !place_meeting(x+xSpeed*dir,y,obj_wall) &amp;&amp; !place_meeting(x,y+ySpeed,obj_wall)){
        done = 0;
        doneTimer = 0;
    }
    if(!done){
        if(xSpeed &gt; 0){
            xSpeed-=xFalloff;
        }
        if(ySpeed &lt; 4){
            ySpeed+=yFalloff;
        }
    
        if(!place_meeting(x+xSpeed*dir,y,obj_wall)){
            x+=xSpeed*dir;
        }else{
            x+=xSpeed*dir;
            done = 1;
            with(hitbox){instance_destroy();}
            hitbox = noone;
        }
        if(!place_meeting(x,y+ySpeed,obj_wall)){
            y+=ySpeed;
        }else{
            y+=ySpeed;
            done = 1;
            with(hitbox){instance_destroy();}
            hitbox = noone;
        }
        
        scr_calculateAngle();
        
        //if(!done){
            //damage calc for enemies handled in scr_enemyHitStep()
        //}
        mask_index = spr_noHB;
    }else{
        doneTimer++;
        if(doneTimer &gt; 270){
            instance_create(x,y,obj_destroy1);
            instance_destroy();
        }else if(doneTimer &gt; 240){
            if(doneTimer mod 3 == 0 || doneTimer mod 4 == 0){
                image_alpha = 0;
            }else{
                image_alpha = 1;
            }
        }else if(doneTimer &gt; 180){
            if(doneTimer mod 6 == 0 || doneTimer mod 7 == 0){
                image_alpha = 0;
            }else{
                image_alpha = 1;
            }
        }
        mask_index = normalSprite;
    }
    
    
    image_angle = rot*dir;
    
    if(hitbox != noone){
        hitbox.x = x;
        hitbox.y = y;
        hitbox.image_angle = image_angle;
    }
    
    scr_destroyIfOutside(); // always remember this for projectiles
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
